#compdef apm

APM_COMMANDS=(
    'clean:Delete all unnecessary npm packages'
    'config:Manage configurations for apm'
    'dedupe:Reduce duplication of npm packages in the current directory'
    {develop,dev}':Prepare for development of published package'
    'disable:Disable the package(s)'
    {docs,home,open}':Open a package'"''"'s homepage in the default browser'
    'enable:Enable the package(s)'
    'featured:List the featured Atom packages and themes'
    'init:Generates code scaffolding for either a theme or package'
    {install,i}':Install the Atom package'
    {link,ln}':Create a symlink for the package in ~/.atom/packages'
    {links,linked,lns}':List all of the symlinked atom packages'
    {list,ls}':List all the installed packages and the packages bundled with Atom'
    'login:Save your atom.io API token to the keychain'
    'publish:Publish a new version of the package in the current directory'
    'rebuild:Rebuild the modules currently installed in the current directory'
    'rebuild-module-cache:Rebuild the module cache for all the packages'
    'search:Search for Atom packages/themes'
    'star:Star the given packages'
    {stars,starred}':List or install starred Atom packages and themes'
    'test:Runs the package'"''"'s tests'
    {uninstall,deinstall,delete,erase,remove,rm}':Delete the installed package(s)'
    'unlink:Delete the symlink in ~/.atom/packages for the package'
    'unpublish:Remove a published package or package version from the atom.io registry'
    'unstar:Unstar the given packages'
    {upgrade,update,outdated}':Upgrade outdated packages'
    {view,show}':View information about a package/theme'
    'help:Show help'
)

HELP_COMMANDS=( $(echo ${(F)APM_COMMANDS} | sed 's/:.*$//g' | grep -v 'help') )

_apm() {
    if (( CURRENT > 2 )); then
        (( CURRENT-- ))
        shift words
        _call_function - "_apm_${words[1]}" || __apm_help_option
    else
        __apm_commands
    fi
}

__apm_commands() {
    local state

    _arguments \
        '(- *)'{-h,--help}'[Print the usage message]' \
        '(- *)'{-v,--version}'[Print the apm version]' \
        ': :->command'

    case $state in
        command)
            _describe 'apm command' APM_COMMANDS
            ;;
    esac
}

__apm_help_option() {
    _arguments '(- *)'{-h,--help}'[Print the usage message]'
}

_apm_help() {
    _describe 'subcommand' HELP_COMMANDS
}

_apm_config() {
    if (( CURRENT > 2 )); then
        _nothing
    else
        _arguments \
            '(- *)'{-h,--help}'[Print the usage message]' \
            ': :->operation'
    fi

    case $state in
        operation)
            _values 'config operations' 'set' 'get' 'delete' 'list' 'edit'
            ;;
    esac
}

_apm_dev() { _apm_develop }
_apm_develop() {
    if (( CURRENT > 2 )); then
        _directories
    else
        _arguments \
            '(- *)'{-h,--help}'[Print the usage message]'
    fi
}

__apm_retrieve_packages_cache() {
    if ( [[ ${+_apm_packages} -eq 0 ]] || _cache_invalid 'apm_packages' ) && ! _retrieve_cache 'apm_packages'; then
        _apm_packages=($(apm list --bare --packages | grep -v '^$' | sed 's/@.*//g'))
        _store_cache 'apm_packages' _apm_packages
    fi
}

_apm_disable() {
    local state

    if (( CURRENT > 2 )); then
        __apm_retrieve_packages_cache
        _describe 'apm packages' _apm_packages
    else
        _arguments \
            '(- *)'{-h,--help}'[Print the usage message]' \
            ': :->packages'
    fi

    case $state in
        packages)
            __apm_retrieve_packages_cache
            _describe 'apm packages' _apm_packages
            ;;
    esac
}

_apm_enable() { _apm_disable }

_apm_docs() {
    _arguments \
        '(- *)'{-h,--help}'[Print the usage message]' \
        '(-)'{-p,--print}'[Print the URL instead of opening it]'
}
_apm_home() { _apm_docs }
_apm_open() { _apm_docs }

_apm_featured() {
    _arguments \
        '(- *)'{-h,--help}'[Print the usage message]' \
        '(-h --help)--json[Output featured packages as JSON array]' \
        '(-t --themes -h --help)'{-t,--themes}'[Only list themes]' \
        '(-c --compatible -h --help)'{-c,--compatible}'[Only list packages/themes compatible with specific Atom version]: :_guard "[0-9.]#" Atom version'
}

_apm_init() {
    _arguments \
        '(- *)'{-h,--help}'[Print the usage message]' \
        '(-h --help)--template[Path to the package or theme template]: :_files' \
        '(-p --package -t --theme -l --language -h --help)'{-p,--package}'[Generate a basic package]' \
        '(-s --syntax -h --help)'{-s,--syntax}'[Choose package language]: :_values "language" "javascript" "coffeescript"' \
        '(-p --package -t --theme -l --language -h --help)'{-t,--theme}'[Generate a basic theme]' \
        '(-p --package -t --theme -l --language -h --help)'{-l,--language}'[Generate a basic language package]' \
        '(-c --convert -h --help)'{-c,--convert}'[Path or URL to TextMate bundle/theme to convert]: :_directories'
}

# vim: ft=zsh
